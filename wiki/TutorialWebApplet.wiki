#summary Using jZebra as a Web Applet component
#labels Featured,Phase-Deploy,Phase-Support

= Introduction =
This is a step-by-step tutorial that walks a web developer through creating a *html web applet* capable of sending raw commands directly to a printer through a Java Applet + JavaScript commands.

*This is a new tutorial for version 1.0.4 and higher.  For version 1.0.3, see the legacy tutorial [TutorialWebApplet_Legacy]*

For a quickstart,  download and extract the [http://code.google.com/p/jzebra/downloads/list latest version] and examine the applet code inside the provide sample html.

*TODO:  Update Preview Screenshot*
  || [http://2.bp.blogspot.com/_9hmP3Ho0t14/SveEeR-bCPI/AAAAAAAAAVo/6YIGLK_GGZo/s1600/xp_ie7.PNG http://2.bp.blogspot.com/_9hmP3Ho0t14/SveEeR-bCPI/AAAAAAAAAVo/6YIGLK_GGZo/s200/xp_ie7.PNG] ||

  || *Note:* jZebra requires Java 5 or higher to run.  For help installing Java on your platform, see the [http://img132.imageshack.us/img132/3416/cup1ad7.png][TutorialJavaInstall Java tutorial]. ||

----
= Steps =
== Load The Applet ==
  # Make sure your printer is set up on your workstation with the name "zebra" (this can be changed later).
  # Make sure printer is connected as a raw print queue for your operating sytem (Click the Windows, Ubuntu, or Mac logo for details)
    [http://code.google.com/p/jzebra/wiki/TutorialRawXP#Steps http://3.bp.blogspot.com/_9hmP3Ho0t14/SvXbFLIbfXI/AAAAAAAAAUQ/EmPDrWLk7YI/s400/config_win.png][http://code.google.com/p/jzebra/wiki/TutorialRawUbuntu#Steps http://4.bp.blogspot.com/_9hmP3Ho0t14/SvXbE4Sp39I/AAAAAAAAAUI/dvvUZ_sJNQA/s400/config_lin.png][http://code.google.com/p/jzebra/wiki/TutorialRawOSX#Steps http://2.bp.blogspot.com/_9hmP3Ho0t14/SvXbE_kTK_I/AAAAAAAAAUA/a-Ucl9UaIvI/s400/config_mac.png]http://2.bp.blogspot.com/_9hmP3Ho0t14/SvXbEnoMELI/AAAAAAAAAT4/eF4xkJ68ALY/s400/config_end.png
  # Download the [http://code.google.com/p/jzebra/downloads/list latest version] and extract the contents to your desktop.  Open "sample.html" with a web browser.
   * The following applet code creates the applet.
    {{{
    <html><body>
       <applet name="jZebra" code="jzebra.RawPrintApplet.class" archive="./jzebra.jar" width="100" height="100"></applet><br><br>
    </html></body>
    }}}
   * The html file should reside in the same folder as `jzebra.jar`.  Alternately, you can move the JAR to a different location so long as you change `archive="./jzebra.jar"` to match your new location.
   || *Note:* IE7 may receive an ActiveX warning. Click "Allow Blocked Content"<br><br> http://2.bp.blogspot.com/_9hmP3Ho0t14/SxgmMqgJQAI/AAAAAAAAAW4/WBkVhYcg4no/s400/blocked_content.png ||
   || *Note:* IE7 may be prompt to Click to Activate This Control each time the applet loads.  Click [http://www.mix-fx.com/flash-prompt.htm here] for details. ||
  #  The applet will begin to load in the web page.
     [http://2.bp.blogspot.com/_9hmP3Ho0t14/SxgoGt3lmKI/AAAAAAAAAXA/jsqVvrlRl4k/s400/applet_loading.PNG]
  #  Next, Java security dialog prompt is shown.  Click "Run".
   [http://1.bp.blogspot.com/_9hmP3Ho0t14/Sxg0XxeTomI/AAAAAAAAAXI/rStKpFiZuU8/s400/digital_signature.PNG]
  #  The applet should be loaded.  At this point it will look like a plain html page with a few sample buttons.
     [http://lh3.ggpht.com/_9hmP3Ho0t14/TSPsD0Os6UI/AAAAAAAAAe0/mjfCFn4asEI/s400/1.0.8%20screenshot.png]
  #  Right click the Java system tray icon (Windows) and clicking "[http://img74.imageshack.us/img74/2423/jzebrajava1tx5.png Open Java Console]".  Linux users run: `jcontrol` --> Advanced --> Java Console --> Show Console.
   || *Note:* The Java Console is critical for calibrating jZebra for your printer. ||
  #  You should see the version of jZebra `"INFO: jZebra 1.x.x"` followed by `"===== JAVASCRIPT LISTENER THREAD STARTED ====="` in the log.  Sample:*
   {{{
       Java Plug-in 1.6.0_17
       Using JRE version 1.6.0_17-b04 Java HotSpot(TM) Client VM
       User home directory = C:\Documents and Settings\tfino
       
       ----------------------------------------------------
       c:   clear console window
       f:   finalize objects on finalization queue
       g:   garbage collect
       h:   display this help message
       l:   dump classloader list
       m:   print memory usage
       o:   trigger logging
       q:   hide console
       r:   reload policy configuration
       s:   dump system and deployment properties
       t:   dump thread list
       v:   dump thread stack
       x:   clear classloader cache
       0-5: set trace level to <n>
       ----------------------------------------------------
       
       Dec 3, 2009 5:03:33 PM jzebra.LogIt log
       INFO: jZebra 1.0.4
       Dec 3, 2009 5:03:33 PM jzebra.LogIt log
       INFO: ===== JAVASCRIPT LISTENER THREAD STARTED =====
   }}}
*
   || At this point, your applet has now been loaded into the web browser.  See Printing section for printer discovery and for sending print commands directly to your printer. ||

== Printing ==
  # jZebra's parameters are set through JavaScript commands.
  # First, insert (or modify) the JavaScript code to search for a printer named "zebra".  The printer name can be anything you wish, i.e: `"Epson"`, `"Citizen"`, `"Generic"`, etc.
   {{{
      <script>
      function findPrinter() {
         // Searches for locally installed printer with "zebra" in the name
         document.jZebra.findPrinter("zebra");
      }
      </script>
  }}}
   || See also `sample.html`, section "findPrinter()". ||
  # Second, use html code for a *Find Printer* button using standard HTML input button.  This button has already been provided in `sample.html`.
   {{{
      <input type=button onClick="findPrinter()" value="Detect Printer"><br><br>
   }}}
  # Third, test the *Find Printer* button.
   *  Load page in web browser and click "Find Printer" button.
   *  View Java console for output.  Look for `"INFO: Printer found..."`
   *  *TODO:  Find Printer Button Screenshot*
  # Fourth, insert (or modify) this JavaScript code to send commands to printer. This button has already been provided in `sample.html`.
   * JavaScript Code: (Example)
   {{{
      function print() {
         // Send characters/raw commands to applet using "append"
         // Hint:  Carriage Return = \r, New Line = \n, Escape Double Quotes= \"
         document.jZebra.append("A37,503,0,1,2,3,N,ABC WIDGET CO\n");

         // Send characters/raw commands to printer
         document.jZebra.print();
      }
   }}}
      || See also `sample.html`, section "print()". ||
   || *Note:* The raw commands provided in the sample are not intended for use with your printer, they're provided as an example. ||
  #  Next, add html code for a *Print* button. This button has already been provided in `sample.html`.
   {{{
       <input type=button onClick="print()" value="Print"><br><br>
   }}}
  #  Last, test "print.html"
   *  Load page in web browser and click "Find Printer" button
   *  Click "Print" button
   *  *TODO:  Print Button Screenshot*
   *  *TODO:  Console Output Screenshot*
   *  View Java console for output
  #  If problems exist, try the included *sample.html* or email the [mailto:tres.finocchiaro@gmail.com author].

=== php Printing ===
  #  If you would rather use php, replace `print()` function with this code:
   {{{
      function print() {
         // Uses the php `"echo"` function in conjunction with jZebra `"append"` function
         // This assumes you have already assigned a value to `"$commands"` with php
         document.jZebra.append(<?php echo $commands; ?>);

         // Send characters/raw commands to printer
         document.jZebra.print();
      }
   }}}

=== Base64 Printing ===
  #  If print data is base64 encoded, replace `print()` function with this code:
   {{{
      // Use jZebra's `"append64"` function. This will automatically convert provided
      // base64 encoded text into ascii/bytes, etc.
      function print() {
         document.jZebra.append64("SEVMTE8hICBZT1UgQVJFIFJFQURJTkcgQSBERUNPREVE");
         document.jZebra.append64("IEJBU0U2NCBNRVNTQUdFIFNFTlQgRlJPTSBKWkVCUkEu");

         // Send characters/raw commands to printer
         document.jZebra.print();
      }
   }}}
   || See also `sample.html`, section "print()". ||

=== Printing Special Characters ===
  #  If special ascii, chr, hex or escape characters need to be printed, use the char code, or the "\x" notation
   {{{
      function print() {
         // Appends CHR(27) + CHR(29) using `"fromCharCode"` function
         document.jZebra.append(String.fromCharCode(27) + String.fromCharCode(29));

         // Appends hexadecimal data using "\x" notation
         document.jZebra.append("\x00\x01\x02\xFF");

         // Send characters/raw commands to printer
         document.jZebra.print();
      }
   }}}
   || See also `sample.html`, section "print()". ||
   {{{
       // For those trying to print special DOS characters in UNIX/Linux
       $ export JAVA_TOOL_OPTIONS=-Dfile.encoding=Cp1252;google-chrome
       // OR
       $ export JAVA_TOOLS_OPTIONS=-Dfile.encoding=Cp1252;firefox
       // You should then see
       $ Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=Cp1252
   }}}

=== Advanced Print Spooling ===
  #  Since version 1.0.6, jZebra has the ability to control spooling to the printer.  For example:  If 90 labels are printed and the printer runs out of paper, the printer will automatically print all 90 labels again.  This feature allows to print in batches of 5, 10, etc.
   {{{
      function print() {

         // Mark the end of a label, in this case  P1 plus a newline character
         // jZebra knows to look for this and treat this as the end of a "page"
         // for better control of larger spooled jobs (i.e. 50+ labels)
         document.jZebra.setEndOfDocument("P1\n");
           
         // The amount of labels to spool to the printer at a time. When
         // jZebra counts this many `EndOfDocument`'s, a new print job will 
         // automatically be spooled to the printer and counting will start
         // over.
         document.jZebra.setDocumentsPerSpool("10");      

         // Send characters/raw commands to printer
         document.jZebra.print();
      }
   }}}

   || See also `sample.html`, section "printPages()". ||

=== XML Printing ===

  #  Since version 1.0.8, jZebra has the ability to read the contents of an XML file containing Base64 encoded commands and send these commands to the printer. The function requires two parameters, the URL of the XML file and the tagname containing the Base64 encoded text.
   {{{
      function printXML() {
         // Appends the contents of an XML file from a SOAP response, etc.
         // a valid relative URL or a valid complete URL is required for the XML
         // file.  The second parameter must be a valid XML tag/node containing
         // base64 encoded data, i.e. <node_1>aGVsbG8gd29ybGQ=</node_1>
         // Example:
         //     applet.appendXML("http://yoursite.com/zpl.xml", "node_1");
         document.jZebra.appendXML("C:\\zpl.xml", "v7:Image");

         // Send characters/raw commands to printer
         document.jZebra.print();
      }

   }}}

   || See also `sample.html`, section "printXML()". ||

=== End of Tutorial ===

== Conclusion ==
  This tutorial needs work.  Please help by submitting changes.  Email questions or suggestions to [mailto:tres.finocchiaro@gmail.com the author].

Alternatively, For questions, feedback and updates, subscribe to the *jZebra Mailing List* on Google Groups:
  [http://groups.google.com/group/jzebra-users http://groups.google.com/intl/en/images/logos/groups_logo_sm.gif]






